/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/api/auth": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** (Auth) Авторизация пользователя и генерация JWT токена */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": {
						/** @example user@example.com */
						login?: string;
						/** @example password123 */
						password?: string;
					};
				};
			};
			responses: {
				/** @description Успешный вход и генерация токена */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": {
							/** @example true */
							auth?: boolean;
							/** @example jwt-token */
							token?: string;
						};
					};
				};
				/** @description Неверный логин или пароль */
				400: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Запланированная ошибка сервера */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/user/favourites": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** (LoadUserFavorites) Получение списка избранных запросов пользователя */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Массив избранных запросов пользователя */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": string[];
					};
				};
				/** @description Неавторизован */
				401: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Запланированная ошибка сервера */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		/** (AddToFavourites) Добавление запроса в избранное пользователя */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": {
						/** @example request-id-1 */
						requestId?: string;
					};
				};
			};
			responses: {
				/** @description Запрос успешно добавлен в избранное */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"text/plain": string;
					};
				};
				/** @description Ошибка при добавлении в избранное */
				400: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Запланированная ошибка сервера */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/user/favourites/{requestId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** (RemoveFromFavourites) Удаление запроса из избранного пользователя */
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					requestId: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Запрос успешно удален из избранного */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"text/plain": string;
					};
				};
				/** @description Ошибка при удалении из избранного */
				400: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Запланированная ошибка сервера */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/user": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** (LoadUserInfo) Получение данных профиля пользователя */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Данные профиля пользователя */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["UserData"];
					};
				};
				/** @description Неавторизован */
				401: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Запланированная ошибка сервера */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/request/{id}/contribution": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** (ContributeToRequest) Внесение вклада в запрос на помощь */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					id: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Вклад успешно внесен */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"text/plain": string;
					};
				};
				/** @description Запрос не найден */
				404: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Запланированная ошибка сервера */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/request/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** (LoadRequestDetails) Получение деталей запроса на помощь */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					id: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Детали запроса на помощь */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["HelpRequestData"];
					};
				};
				/** @description Отсутствует ID запроса */
				400: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Запрос не найден */
				404: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Запланированная ошибка сервера */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/request": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** (LoadRequests) Получение всех запросов на помощь */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Список всех запросов на помощь */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["HelpRequestData"][];
					};
				};
				/** @description Запланированная ошибка сервера */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		UserData: {
			/** @example user-id-1 */
			id?: string;
			/** @example Александр */
			name?: string;
			/** @example Иванов */
			lastName?: string;
			/**
			 * Format: date
			 * @example 1950-07-23
			 */
			birthdate?: string;
			/** @enum {string} */
			status?: "Начинающий" | "Опытный";
			baseLocations?: {
				/** @example 40.712776 */
				latitude?: number;
				/** @example -74.005974 */
				longitude?: number;
				/** @example Центральный */
				district?: string;
				/** @example Москва */
				city?: string;
			}[];
			educations?: {
				/** @example МГУ */
				organizationName?: string;
				/** @enum {string} */
				level?: "Среднее общее" | "Среднее профессиональное" | "Высшее";
				/** @example Филология */
				specialization?: string;
				/** @example 1980 */
				graduationYear?: number;
			}[];
			/** @example Дополнительная информация о пользователе. */
			additionalInfo?: string;
			contacts?: {
				/**
				 * Format: email
				 * @example user@example.com
				 */
				email?: string;
				/** @example +123456789 */
				phone?: string;
				social?: {
					/** @example @user */
					telegram?: string;
					/** @example +123456789 */
					whatsapp?: string;
					/** @example user_vk_id */
					vk?: string;
				};
			};
			favouriteRequests?: string[];
		};
		HelpRequestData: {
			/** @example request-id-1 */
			id?: string;
			/** @example Помощь в проекте */
			title?: string;
			organization?: {
				/** @example Благотворительная организация */
				title?: string;
				isVerified?: boolean;
			};
			/** @example Описание запроса на помощь. */
			description?: string;
			/** @example Цель данного запроса. */
			goalDescription?: string;
			actionsSchedule?: {
				/** @example Шаг 1 */
				stepLabel?: string;
				isDone?: boolean;
			}[];
			/**
			 * Format: date
			 * @example 2023-12-31
			 */
			endingDate?: string;
			location?: {
				/** @example 40.712776 */
				latitude?: number;
				/** @example -74.005974 */
				longitude?: number;
				/** @example Пресненский */
				district?: string;
				/** @example Москва */
				city?: string;
			};
			contacts?: {
				/**
				 * Format: email
				 * @example contact@example.com
				 */
				email?: string;
				/** @example +123456789 */
				phone?: string;
				/** @example https://example.com */
				website?: string;
			};
			/** @enum {string} */
			requesterType?: "person" | "organization";
			/** @enum {string} */
			helpType?: "finance" | "material";
			helperRequirements?: {
				/** @enum {string} */
				helperType?: "group" | "single";
				isOnline?: boolean;
				/** @enum {string} */
				qualification?: "professional" | "common";
			};
			/** @example 10 */
			contributorsCount?: number;
			/** @example 10000 */
			requestGoal?: number;
			/** @example 2500 */
			requestGoalCurrentValue?: number;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
